<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wjs.questionnaire.mapper.QuestionMapper">

    <!-- 查询 question 表所有字段 -->
    <sql id="selectQuestionFields">
        question_id, question_title, question_description,
        question_status, pre_question_id, pre_option_id,
        questionnaire_id, questiontype_id, question_create_time
    </sql>

    <!-- 插入 question 表字段 -->
    <sql id="insertQuestionFields">
        question_id, question_title, question_description,
        question_status,
        questionnaire_id, questiontype_id, question_create_time
    </sql>

    <!-- 插入 question 表字段 -->
    <sql id="insertQuestionsFields">
        question_id, question_title, question_description,
        question_status, pre_question_id, pre_option_id,
        questionnaire_id, questiontype_id, question_create_time
    </sql>

    <!-- 获取所有问题信息列表 -->
    <!-- List<QuestionEntity> findAllQuestionList(); -->
    <select id="findAllQuestionList" resultType="QuestionEntity">
        SELECT
        <include refid="selectQuestionFields"></include>
        FROM `question`
        ORDER BY question_create_time DESC
    </select>

    <!-- 根据 qnId 查询当前问卷的所有问题 -->
    <!-- List<QuestionEntity> findAllQuestionByQnId(String qnId); -->
    <select id="findAllQuestionByQnId" resultType="QuestionEntity">
        SELECT
        <include refid="selectQuestionFields"></include>
        FROM `question`
        WHERE questionnaire_id = #{questionnaireId}
        ORDER BY question_create_time ASC
    </select>

    <!-- 根据 qnId 查询当前问卷的所有问题的行数 -->
    <!-- int findQuestionRowsByQnId(String qnId); -->
    <select id="findQuestionRowsByQnId" resultType="int">
        SELECT COUNT(question_id)
        FROM `question`
        WHERE questionnaire_id = #{questionnaireId}
    </select>

    <!-- 根据 qnId 查询当前问卷的所有问题 -->
    <!-- List<QuestionEntity> findQuestionPageByQnId(String qnId, int offset, int limit); -->
    <select id="findQuestionPageByQnId" resultType="QuestionEntity">
        SELECT
        <include refid="selectQuestionFields"></include>
        FROM `question` q
        WHERE q.questionnaire_id = #{qnId}
        ORDER BY q.question_create_time ASC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 根据 qnId 查询当前问卷未被前置的问题的行数 -->
    <!-- int findNoPrependedQuestionRowsByQnId(String qnId); -->
    <select id="findNoPrependedQuestionRowsByQnId" resultType="int">
        <!-- 查询未被前置的问题的行数 法一 -->
        SELECT COUNT(question_id)
        FROM `question` q2
        WHERE q2.question_id NOT IN
        (SELECT q1.pre_question_id
        FROM `question` q1
        WHERE q1.questionnaire_id = #{qnId}
        AND q1.pre_question_id IS NOT NULL)
        AND q2.questionnaire_id = #{qnId}

        <!-- 查询未被前置的问题的行数 法二 -->
        <!--SELECT COUNT(question_id)
        FROM `question` q2
        WHERE NOT EXISTS
        (SELECT q1.pre_question_id
        FROM `question` q1
        WHERE q1.questionnaire_id = #{qnId}
        AND q1.pre_question_id IS NOT NULL
        AND q1.pre_question_id = q2.question_id)
        AND q2.questionnaire_id = #{qnId}-->
    </select>

    <!-- 根据 qnId 查询当前问卷未被前置的问题 -->
    <!-- List<QuestionEntity> findNoPrependedQuestionPageByQnId(String qnId, int offset, int limit); -->
    <select id="findNoPrependedQuestionPageByQnId" resultType="QuestionEntity">
        <!-- 查询未被前置的问题 法一 -->
        SELECT
        <include refid="selectQuestionFields"></include>
        FROM `question` q2
        WHERE q2.question_id NOT IN
        (SELECT q1.pre_question_id
        FROM `question` q1
        WHERE q1.questionnaire_id = #{qnId}
        AND q1.pre_question_id IS NOT NULL)
        AND q2.questionnaire_id = #{qnId}
        ORDER BY q2.question_create_time ASC
        LIMIT #{offset}, #{limit}

        <!-- 查询未被前置的问题 法二 -->
        <!--SELECT
        <include refid="selectQuestionFields"></include>
        FROM `question` q2
        WHERE NOT EXISTS
        (SELECT q1.pre_question_id
        FROM `question` q1
        WHERE q1.questionnaire_id = #{qnId}
        AND q1.pre_question_id IS NOT NULL
        AND q1.pre_question_id = q2.question_id)
        AND q2.questionnaire_id = #{qnId}
        ORDER BY q2.question_create_time ASC
        LIMIT #{offset}, #{limit}-->
    </select>

    <!-- 根据 qnId 查询当前问卷被前置的问题的行数 -->
    <!-- int findPrependedQuestionRowsByQnId(String qnId); -->
    <select id="findPrependedQuestionRowsByQnId" resultType="int">
        <!-- 查询被前置的问题的行数 法一 -->
        SELECT COUNT(question_id)
        FROM `question` q2
        WHERE q2.question_id IN
        (SELECT q1.pre_question_id
        FROM `question` q1
        WHERE q1.questionnaire_id = #{qnId}
        AND q1.pre_question_id IS NOT NULL)
        AND q2.questionnaire_id = #{qnId}

        <!-- 查询被前置的问题的行数 法二 -->
        <!--SELECT COUNT(question_id)
        FROM `question` q2
        WHERE EXISTS
        (SELECT q1.pre_question_id
        FROM `question` q1
        WHERE q1.questionnaire_id = #{qnId}
        AND q1.pre_question_id IS NOT NULL
        AND q1.pre_question_id = q2.question_id)
        AND q2.questionnaire_id = #{qnId}-->
    </select>

    <!-- 根据 qnId 查询当前问卷被前置的问题 -->
    <!-- List<QuestionEntity> findPrependedQuestionPageByQnId(String qnId, int offset, int limit); -->
    <select id="findPrependedQuestionPageByQnId" resultType="QuestionEntity">
        <!-- 查询被前置的问题 法一 -->
        SELECT
        <include refid="selectQuestionFields"></include>
        FROM `question` q2
        WHERE q2.question_id IN
        (SELECT q1.pre_question_id
        FROM `question` q1
        WHERE q1.questionnaire_id = #{qnId}
        AND q1.pre_question_id IS NOT NULL)
        AND q2.questionnaire_id = #{qnId}
        ORDER BY q2.question_create_time ASC
        LIMIT #{offset}, #{limit}

        <!-- 查询被前置的问题 法二 -->
        <!--SELECT
        <include refid="selectQuestionFields"></include>
        FROM `question` q2
        WHERE EXISTS
        (SELECT q1.pre_question_id
        FROM `question` q1
        WHERE q1.questionnaire_id = #{qnId}
        AND q1.pre_question_id IS NOT NULL
        AND q1.pre_question_id = q2.question_id)
        AND q2.questionnaire_id = #{qnId}
        ORDER BY q2.question_create_time ASC
        LIMIT #{offset}, #{limit}-->
    </select>

    <!-- 根据 qnId 和 qId 查询当前问卷指定的问题 -->
    <!-- QuestionEntity findQuestionByQnIdAndQId(String qnId, String qId); -->
    <select id="findQuestionByQnIdAndQId" resultType="QuestionEntity">
        SELECT
        <include refid="selectQuestionFields"></include>
        FROM `question` q1
        WHERE q1.questionnaire_id = #{qnId}
        AND q1.question_id = #{qId}
    </select>

    <!-- 如果当前问题是前置问题，则找到当前问题的后置问题 -->
    <!-- QuestionEntity findRearQuestionByPrependedByQnIdAndQId(String qnId, String qId); -->
    <select id="findRearQuestionByPrependedByQnIdAndQId" resultType="QuestionEntity">
        SELECT *
        FROM `question` q2
        WHERE q2.pre_question_id IN
        (SELECT q1.question_id
        FROM `question` q1
        WHERE q1.questionnaire_id = #{qnId}
        AND q1.question_id = #{qId})
        AND q2.questionnaire_id = #{qnId}
    </select>

    <!-- 如果当前问题是后置问题，则找到当前问题的前置问题 -->
    <!-- QuestionEntity findPrependedQuestionByRearByQnIdAndQId(String qnId, String qId); -->
    <select id="findPrependedQuestionByRearByQnIdAndQId" resultType="QuestionEntity">
        SELECT *
        FROM `question` q2
        WHERE q2.question_id IN
        (SELECT q1.pre_question_id
        FROM `question` q1
        WHERE q1.questionnaire_id = #{qnId}
        AND q1.question_id = #{qId})
        AND q2.questionnaire_id = #{qnId}
    </select>

    <!-- 保存问题信息 -->
    <!-- int insertQuestion(QuestionEntity qn); -->
    <insert id="insertQuestion" parameterType="QuestionEntity">
        INSERT INTO `question`(<include refid="insertQuestionFields"></include>)
        VALUES(#{questionId}, #{questionTitle}, #{questionDescription}, #{questionStatus}, #{questionnaireId}, #{questiontypeId},
        #{questionCreateTime})
    </insert>

    <!-- 保存问题信息 -->
    <!-- int insertQuestion(QuestionEntity qn); -->
    <insert id="insertQuestions" parameterType="QuestionEntity">
        INSERT INTO `question`(<include refid="insertQuestionsFields"></include>)
        VALUES(#{questionId}, #{questionTitle}, #{questionDescription}, #{questionStatus}, #{preQuestionId}, #{preOptionId},
        #{questionnaireId}, #{questiontypeId}, #{questionCreateTime})
    </insert>

    <!-- 更新问题信息 -->
    <!-- int updateQuestion(QuestionEntity q); -->
    <update id="updateQuestion" parameterType="QuestionEntity">
        UPDATE `question` SET
        question_title = #{questionTitle},
        question_description = #{questionDescription},
        question_status = #{questionStatus},
        questiontype_id = #{questiontypeId},
        question_create_time = #{questionCreateTime}
        WHERE questionnaire_id = #{questionnaireId}
        AND question_id = #{questionId}
    </update>

    <!-- 更新问题信息 -->
    <!-- int updateQuestions(QuestionEntity q); -->
    <update id="updateQuestions" parameterType="QuestionEntity">
        UPDATE `question` SET
        question_title = #{questionTitle},
        question_description = #{questionDescription},
        question_status = #{questionStatus},
        pre_question_id = #{preQuestionId},
        pre_option_id = #{preOptionId},
        questiontype_id = #{questiontypeId},
        question_create_time = #{questionCreateTime}
        WHERE questionnaire_id = #{questionnaireId}
        AND question_id = #{questionId}
    </update>

</mapper>
